SELECT
      a.OnlinePromotionDescription,
      substring(OnlinePromotionDescription,1,CHARINDEX('%', OnlinePromotionDescription)) as Firstname,
	  substring(OnlinePromotionDescription, CHARINDEX('%', OnlinePromotionDescription)+1, len(OnlinePromotionDescription)-(CHARINDEX(' ', OnlinePromotionDescription)-1)) as lastname,
	  substring(OnlinePromotionDescription,2,len(OnlinePromotionDescription)-1) as test---substr(v1,1)

FROM
[dm].[dOnlinePromotion] a
 
 
 
 *********
 
 
 select
  DateKey,
  YearMonth,
  DayDate,
  YearCode,
  CONCAT(
    lower(substring(MonthNameSwedish, 1, 3)),'-',yearcode) as MonthNameSwedishShort
from
  dm.dDate 
where
  datekey between (
    select
      min(datekey)
    from
      [reports].[v_CoopOnline_R101_Försäljning_Kunder_1_1]
  )
  and (
    select
      max(datekey)
    from
      [reports].[v_CoopOnline_R101_Försäljning_Kunder_1_1])
      
      
      
      *********
 
 
 --Left(CONVERT(varchar,a.DateKey,112), 6) AS DateMonth,

import pyodbc
from sqlalchemy import create_engine
import urllib
import pandas as pd

server='PF15AYH5'
database='AdventureWorks2017'
 
params = urllib.parse.quote_plus(r'DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';Trusted_Connection=yes')
conn_str = 'mssql+pyodbc:///?odbc_connect={}'.format(params)
conn = create_engine(conn_str)

sql=''' 
SELECT * FROM Sales.Store
'''
df = pd.read_sql_query(sql, conn)


server_out='PF15AYH5'
database='RONSEN'
 
params = urllib.parse.quote_plus(r'DRIVER={SQL Server};SERVER='+server_out+';DATABASE='+database+';Trusted_Connection=yes')
conn_str = 'mssql+pyodbc:///?odbc_connect={}'.format(params)
conn_out = create_engine(conn_str)

df.to_sql(name='test2',con=conn,index=False,if_exists='replace')


drop_table='test2'
pd.io.sql.execute('DROP TABLE IF EXISTS '+ drop_table, conn)


######################
#%%
#sql server


import pyodbc
from sqlalchemy import create_engine
import urllib
import pandas as pd


server_out='PF15AYH5'
database='RONSEN'
 
params = urllib.parse.quote_plus(r'DRIVER={SQL Server};SERVER='+server_out+';DATABASE='+database+';Trusted_Connection=yes')
conn_str = 'mssql+pyodbc:///?odbc_connect={}'.format(params)
conn_out = create_engine(conn_str)


#first drop and then create an empty table in sql server
table='test22'
pd.io.sql.execute('DROP TABLE IF EXISTS '+ table, conn_out)



create_table='''
CREATE TABLE %s
(
Vernr  NVARCHAR(max),
Bokforingsdatum DATE ,
Registreringsdatum DATE,
Konto  NUMERIC,
Verifikationstext NVARCHAR(max),
Debet FLOAT,
Kredit  FLOAT,
Created_Date DATE 
)
'''%(table)

pd.io.sql.execute(create_table, conn_out)

dataset.to_sql(name=str(table),con=conn_out,index=False,if_exists='append')

################





#create empty table
USE RONSEN;
GO
DROP TABLE IF EXISTS test2;
GO
CREATE TABLE test2
(
Vernr  NVARCHAR(max),
Bokforingsdatum DATE ,
Registreringsdatum DATE,
Konto  NUMERIC,
Verifikationstext NVARCHAR(max),
Debet FLOAT,
Kredit  FLOAT,
Created_Date DATE 

)

'''


select * from openquery(MYTESTSQLITE3,

' select  * from test  ')


select * into testa1

from openquery(MYTESTSQLITE3,

' select  * from test  ')




sql = "SELECT * FROM testttt"
for df in pd.read_sql_query(sql , con=SQLITE3, chunksize=5):
    df['one']=1
    df['DateKey1'] = df.groupby(['one'])['one'].apply(lambda x: x.cumsum())
    df.to_sql(name='testttt2',con=SQLITE3,index=False,if_exists='append')




DECLARE @processdate AS DATETIME
SET    @processdate = '2019-01-02'
SELECT Cast(@processdate as datetime) as Mydate,
DATEPART(dy, Cast(@processdate as datetime)) AS DayOfYear,
  DATEDIFF(d, DATEADD(qq, DATEDIFF(qq, 0, Cast(@processdate as datetime)), 0), Cast(@processdate as datetime)) + 1 AS DayOfQuarter
   , DAY(Cast(@processdate as datetime)) AS DayOfMonth,
    DATEPART(dw, Cast(@processdate as datetime))-1 AS DayOfWeek

