

import pandas as pd
from zipfile import ZipFile
import datetime
import pyodbc
from sqlalchemy import create_engine
import urllib
import gc


server_out='PF15AYH5'
database='RONSEN'
 
params = urllib.parse.quote_plus(r'DRIVER={SQL Server};SERVER='+server_out+';DATABASE='+database+';Trusted_Connection=yes')
conn_str = 'mssql+pyodbc:///?odbc_connect={}'.format(params)
conn_out = create_engine(conn_str)

chunksize = 1000000
separator = "|"
encoding="ISO-8859-1" #encoding="ISO-8859-1" #'utf-8-sig'

Main_Path=r'C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Archive\test_20181206.zip'


files_in_zipfile = ZipFile(Main_Path)

files = files_in_zipfile.namelist()

df_files = pd.DataFrame({'files':files})
df_files['filename']=df_files.files.str.split('.').apply(lambda x: x[0])
df_files['extension']=df_files.files.str.split('.').apply(lambda x: x[-1])
df_files=df_files.query('extension in ["csv"] ')  


files=list(df_files.files)
filenames=list(df_files.filename)

#for file,filename in zip(files,filenames):
#    globals()[str(filename)]=pd.DataFrame()
#    globals()[str(filename)] = pd.read_csv(files_in_zipfile.open(str(file)), sep=separator,encoding = encoding, low_memory=False)
#    globals()[str(filename)]['File']=str(filename)
#    globals()[str(filename)]['ImportedDate']=str(Today) 
#    table=str(filename)
#    globals()[str(filename)].to_sql(name=str(table),con=conn_out,index=False,if_exists='replace')
#    del [[globals()[str(filename)]]]
#    gc.collect()
    
for filename in (filenames):
    globals()[str(filename)]=pd.DataFrame()
    
for file,filename in zip(files,filenames):
    for dfx in pd.read_csv(files_in_zipfile.open(str(file)), sep=separator,encoding = encoding, low_memory=False,iterator=True,chunksize=chunksize):
        globals()[str(filename)] = globals()[str(filename)].append(dfx, ignore_index=True,sort=False)
        Today=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        globals()[str(filename)]['File']=str(filename)
        globals()[str(filename)]['ImportedDate']=str(Today) 
        globals()[str(filename)].to_sql(name=str(filename),con=conn_out,index=False,if_exists='replace')
   


del [[dfx]]
gc.collect()








import os
import shutil
from zipfile import ZipFile
import pandas as pd

#define the path and the extension
# make sure that these path exist
source = r"C:\RONSEN\PYTHON\SSIS_KURS\ftproot\\"
destination_path = r"C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Workfiles\\"
archive_path=r'C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Archive\\'

ext='.csv'

##############################################################################
#you mustnt change anythig below

#this loop moves all files from the source to the defined destination path
for file in os.listdir(source):
    #print (file)  # testing
    src_file = os.path.join(source, file)
    dst_file = os.path.join(destination_path, file)
    shutil.move(src_file, dst_file)



#the loop lists all files with the chosed extension (ext)
files_names = os.listdir(destination_path)
File_name = [i for i in files_names if i.endswith(ext)] #txt csv xlsx xlsm osv.

#a dataframe is created for making a list for the filenames och what the zipfiles will be called
zipnames = pd.DataFrame({'files': File_name})
zipnames['zipfilenames']=zipnames.files.str.split('.').apply(lambda x: x[0])





#this loop creates a zipfile for all chosed files and move these the the archived path
zipnames['files']=zipnames.zipfilenames+ext
zipfilenames=zipnames.iloc[:,1].tolist()
files=zipnames.iloc[:,0].tolist()
for file, zipfilename in zip(files,zipfilenames):
    with ZipFile(archive_path + zipfilename+'.zip', 'w') as myzip:
        myzip.write(os.path.join(destination_path, file), arcname=file)

#this loop will delete all files in the destination path
for Delete_file in files:
    myfile=destination_path+Delete_file
    ## If file exists, delete it ##
    if os.path.isfile(myfile):
     os.remove(myfile)
    else:    ## Show an error ##
        print("Error: %s file not found" % myfile)
      
      
      #all files
      
      # -*- coding: utf-8 -*-
"""
Created on Thu Dec  6 18:38:18 2018

@author: F2531197
"""


import os
import shutil
from zipfile import ZipFile
import datetime

Today=datetime.datetime.now().strftime("%Y%m%d") #the date when you read the files
#define the path and the extension
# make sure that these path exist
source = r"C:\RONSEN\PYTHON\SSIS_KURS\ftproot\\" #this is the destination where the costumer/you put the infiles
destination_path = r"C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Workfiles\\" #this is the path where you read yours files from
archive_path=r'C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Archive\\' #this is the path where we keep the history files

zipname='test' #what will the zip file be called?
#%%

##############################################################################
#you mustnt change anythig below

#this loop moves all files from the source to the defined destination path
for file in os.listdir(source):
    #print (file)  # testing
    src_file = os.path.join(source, file)
    dst_file = os.path.join(destination_path, file)
    shutil.move(src_file, dst_file)



#get all files from this path
def get_all_file_paths(destination_path):
    file_paths = []

    for root, directories, files in os.walk(destination_path):
        for filename in files:
            filepath = os.path.join(root, filename)
            file_paths.append(filepath)
        return file_paths

file_paths = get_all_file_paths(destination_path)



    
#zip all files in source path and put those in archive path
with ZipFile(archive_path+zipname+'_'+Today+'.zip','w') as myzip:
    for file in file_paths:
        myzip.write(file, os.path.basename(file))             



#this loop will delete all files in the destination path
for Delete_file in file_paths:
    ## If file exists, delete it ##
    if os.path.isfile(Delete_file):
     os.remove(Delete_file)
    else:    ## Show an error ##
        print("Error: %s file not found" % Delete_file)  
        
        
        #read csv zip
        import pandas as pd
from zipfile import ZipFile

chunksize = 10
separator = "|"
encoding="ISO-8859-1" #encoding="ISO-8859-1" #'utf-8-sig'

Main_Path=r'C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Archive\test_20181206.zip'


files_in_zipfile = ZipFile(Main_Path)

files = files_in_zipfile.namelist()

df_files = pd.DataFrame({'files':files})
df_files['filename']=df_files.files.str.split('.').apply(lambda x: x[0])
df_files['extension']=df_files.files.str.split('.').apply(lambda x: x[-1])
df_files=df_files.query('extension in ["csv"] ')  


files=list(df_files.files)
filenames=list(df_files.filename)

for file,filename in zip(files,filenames):
    globals()[str(filename)]=pd.DataFrame()
    globals()[str(filename)] = pd.read_csv(files_in_zipfile.open(str(file)), sep=separator,encoding = encoding, low_memory=False)
    globals()[str(filename)]['File']=str(filename) 
    print(file,filename)


#read csv dict
from zipfile import ZipFile
import pandas as pd


chunksize = 10
separator = "|"
encoding="ISO-8859-1" #encoding="ISO-8859-1" #'utf-8-sig'




Main_Path=r'C:\RONSEN\PYTHON\SSIS_KURS\SourceFiles\Archive\test_20181206.zip'
zip_file = ZipFile(Main_Path)
dfs = {text_file.filename: pd.read_csv(zip_file.open(text_file.filename), sep=separator,encoding = encoding, low_memory=False)
       for text_file in zip_file.infolist()
       if text_file.filename.endswith('.csv')}



keys=list(dfs.keys())
df_keys = pd.DataFrame({'files':keys})
df_keys['filename']=df_keys.files.str.split('.').apply(lambda x: x[0])
df_keys['extension']=df_keys.files.str.split('.').apply(lambda x: x[-1])
df_keys=df_keys.query('extension in ["csv"] ')

files=list(df_keys.files)
filenames=list(df_keys.filename)

for file,filename in zip(files,filenames):
    globals()[str(filename)]=dfs[file]
    globals()[str(filename)]['File']=str(filename)
