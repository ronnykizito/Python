
from pyspark.sql.types import *

from pyspark.sql.functions import *
from pyspark.sql import Window, functions as F


keepcols = [
    "date",
    "Last_updated_time_in_Azure",
    "date_key",
    "first_date_of_year",
    "last_date_of_year",
    "first_date_of_quarter",
    "last_date_of_quarter",
    "first_date_of_month",
    "last_date_of_month",
    "first_date_of_week",
    "last_date_of_week",
    "date_of_same_weekday_last_year",
    "first_date_of_same_weekday_last_year",
    "last_date_of_same_weekday_last_year",
    "year_code",
    "quarter_code",
    "month_code",
    "month_nummer",
    "week_code",
    "week_number",
    "week_name",
    "week_long_name",
    "quater_number",
    "quater_name",
    "quater_code",
    "month_name_english_long",
    "month_name_english_short",
    "month_name_swedish_long",
    "month_name_swedish_short",
    "number_of_days_in_month",
    "day_of_year",
    "day_of_quarter",
    "day_of_month",
    "day_of_week",
    "week_name_english_long",
    "week_name_english_short",
    "week_name_swedish_long",
    "week_name_swedish_short",
    "is_leap_year",
    "is_weekend",
    "previous_date",
    "last_year_date",
    "first_date_of_last_year",
    "last_date_of_last_year",
    "previous_month_date",
    "previous_month_date_start",
    "previous_month_date_end",
    "previous_week",
]
beginDate = "2020-01-01"
endDate = "2024-12-31"

# https://www.obstkel.com/spark-sql-date-functions
# https://dwgeek.com/spark-sql-date-and-timestamp-functions-and-examples.html/
# https://towardsdatascience.com/the-most-useful-date-manipulation-functions-in-sark-7d827f790b

df = (
    spark.sql(
        f"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as date"
    )
    .withColumns(
        {
            "Last_updated_time_in_Azure": from_utc_timestamp(
                current_timestamp(), "Europe/Stockholm"
            ),
            "date_key": date_format("date", "yyyyMMdd").cast(IntegerType()),
            "first_date_of_year": trunc("date", "year"),
            "last_date_of_year": concat(year("date"), lit("-12-31")).cast(DateType()),
            "first_date_of_quarter": trunc("date", "quarter"),
            "last_date_of_quarter": add_months(last_day(trunc("date", "quarter")), 2),
            "first_date_of_month": trunc("date", "month"),
            "last_date_of_month": last_day("Date"),
            "first_date_of_week": trunc("date", "week"),
            "last_date_of_week": date_add(trunc("date", "week"), 6),
            "date_of_same_weekday_last_year": date_add("date", -364),
            "first_date_of_same_weekday_last_year": trunc(
                date_add("date", -364), "week"
            ),
            "last_date_of_same_weekday_last_year": date_add(
                trunc(date_add("date", -364), "week"), 6
            ),
            "year_code": year("date"),
            "quarter_code": concat(
                date_format("date", "yyyy"), lpad(quarter("date"), 2, "0")
            ).cast(IntegerType()),
            "month_code": date_format("date", "yyyyMM").cast(IntegerType()),
            "month_nummer": lpad(month("date"), 2, "0"),
            "week_code": concat(year("date"), lpad(weekofyear("date"), 2, "0")).cast(
                IntegerType()
            ),
            "week_number": lpad(weekofyear("date"), 2, "0"),
            "week_name": concat(lit("W"), lpad(weekofyear("date"), 2, "0")),
            "week_long_name": concat(
                year("date"), concat(lit("W"), lpad(weekofyear("date"), 2, "0"))
            ),
            "quater_number": lpad(quarter("date"), 2, "0"),
            "quater_name": concat(lit("Q"), quarter("date")),
            "quater_code": concat(
                date_format("date", "yyyy"), concat(lit("Q"), quarter("date"))
            ),
            "month_name_english_long": date_format("date", "MMMM"),
            "month_name_english_short": date_format("date", "MMM"),
            "month_name_swedish_long": F.to_csv(
                F.struct("date"), {"dateFormat": "MMMM", "locale": "sv"}
            ),
            "month_name_swedish_short": F.to_csv(
                F.struct("date"), {"dateFormat": "MMM", "locale": "sv"}
            ),
            "number_of_days_in_month": dayofmonth(last_day("Date")),
            "day_of_year": dayofyear("date"),
            "day_of_quarter": (
                F.count("*").over(
                    Window.partitionBy(
                        concat(
                            date_format("date", "yyyy"),
                            concat(lit("Q"), quarter("date")),
                        )
                    )
                )
                - datediff(
                    date_add(add_months(last_day(trunc("date", "quarter")), 2), 1),
                    "date",
                )
                + lit(1)
            ).cast(IntegerType()),
            "day_of_month": dayofmonth("date"),
            "day_of_week": F.expr("weekday(date) + 1"),
            "week_name_english_long": date_format("date", "EEEE"),
            "week_name_english_short": date_format("date", "EEE"),
            "week_name_swedish_long": F.to_csv(
                F.struct("date"), {"dateFormat": "EEEE", "locale": "sv"}
            ),
            "week_name_swedish_short": F.to_csv(
                F.struct("date"), {"dateFormat": "EEE", "locale": "sv"}
            ),
            "MaxIndex": F.max(dayofyear("date")).over(
                Window.partitionBy([year("date")])
            ),
            "is_leap_year": expr(
                "case when ((year_code % 400 == 0) or  (year_code % 100 != 0) and  (year_code % 4 == 0)) then 'true' else 'false' end "
            ),
            "is_weekend": expr(
                "case when week_name_swedish_short in ('lö','sö') then 'true' else 'false' end "
            ),
            "previous_date": date_add("date", -1),
            "last_year_date": add_months("date", -12),
            "first_date_of_last_year": trunc(add_months("date", -12), "year"),
            "last_date_of_last_year": concat(
                year(trunc(add_months("date", -12), "year")), lit("-12-31")
            ).cast(DateType()),
            "previous_month_date": add_months("date", -1),
            "previous_month_date_start": trunc(add_months("date", -1), "month"),
            "previous_month_date_end": last_day(trunc(add_months("date", -1), "month")),
            "previous_week": date_add("date", -7),
        }
    )
    .select(*keepcols)
    .select([F.col(col).alias(col.lower()) for col in df.columns])
)

display(df)



































#EEE MMM
from pyspark.sql.types import *

from pyspark.sql.functions import *
from pyspark.sql import Window,functions as F
beginDate = '2023-01-01'
endDate = '2024-12-31'

#https://www.obstkel.com/spark-sql-date-functions
#https://dwgeek.com/spark-sql-date-and-timestamp-functions-and-examples.html/
#https://towardsdatascience.com/the-most-useful-date-manipulation-functions-in-sark-7d827f790b

df=spark.sql(f"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as date")\
.select('*',
from_utc_timestamp(current_timestamp(),'Europe/Stockholm').alias("Last_updated_time_in_Azure"),
date_format('date', 'yyyyMMdd').cast(IntegerType()).alias("date_key"),
trunc("date", "year").alias("first_date_of_year"),
concat(year("date"),lit("-12-31")).cast(DateType()).alias("last_date_of_year"),
trunc("date", "quarter").alias("first_date_of_quarter"),
add_months(last_day(trunc("date", "quarter")),2).alias("last_date_of_quarter"),
trunc("date", "month").alias("first_date_of_month"),
last_day("Date").alias("last_date_of_month"),
trunc("date", "week").alias("first_date_of_week"),
date_add(trunc("date", "week"),6).alias("last_date_of_week"),
date_add("date", -364).alias("date_of_same_weekday_last_year"),
trunc(date_add("date", -364), "week").alias("first_date_of_same_weekday_last_year"),
date_add(trunc(date_add("date", -364), "week"),6).alias("last_date_of_same_weekday_last_year"),
year('date').alias("year_code"),
concat(date_format('date', 'yyyy'),lpad(quarter("date"),2, '0')).cast(IntegerType()).alias("quarter_code"),
date_format('date', 'yyyyMM').cast(IntegerType()).alias("month_code"),
lpad(month('date'),2,"0").alias("month_nummer"),
concat(year("date"), lpad(weekofyear('date'),2,"0")).cast(IntegerType()).alias("week_code"),
lpad(weekofyear('date'),2,"0").alias("week_number"),
concat(lit("W"),lpad(weekofyear('date'),2,"0")).alias("week_name"),
concat(year('date'),concat(lit("W"),lpad(weekofyear('date'),2,"0"))).alias("week_long_name"),
lpad(quarter("date"),2,"0").alias("quater_number"),
concat(lit("Q"),quarter("date")).alias("quater_name"),
concat(date_format('date', 'yyyy'),concat(lit("Q"),quarter("date"))).alias("quater_code"),
date_format("date", "MMMM").alias("month_name_english_long"),
date_format("date", "MMM").alias("month_name_english_short"),
F.to_csv(F.struct('date'), {'dateFormat': 'MMMM', 'locale': 'sv'}).alias("month_name_swedish_long"),
F.to_csv(F.struct('date'), {'dateFormat': 'MMM', 'locale': 'sv'}).alias("month_name_swedish_short"),
dayofmonth(last_day("Date")).alias("number_of_days_in_month"),
dayofyear('date').alias("day_of_year"),
# F.count("*").over(Window.partitionBy(concat(date_format('date', 'yyyy'),concat(lit("Q"),quarter("date"))))).alias("ct"),
# datediff(date_add(add_months(last_day(trunc("date", "quarter")),2),1),"date").alias("days_of_quarter"),
(F.count("*").over(Window.partitionBy(concat(date_format('date', 'yyyy'),concat(lit("Q"),quarter("date")))))-datediff(date_add(add_months(last_day(trunc("date", "quarter")),2),1),"date")+lit(1)).alias("day_of_quarter"),
dayofmonth('date').alias("day_of_month"),
F.expr('weekday(date) + 1').alias("day_of_week"),
date_format("date", "EEEE").alias("week_name_english_long"),
date_format("date", "EEE").alias("week_name_english_short"),
F.to_csv(F.struct('date'), {'dateFormat': 'EEEE', 'locale': 'sv'}).alias("week_name_swedish_long"),
F.to_csv(F.struct('date'), {'dateFormat': 'EEE', 'locale': 'sv'}).alias("week_name_swedish_short"),
F.max(dayofyear('date')).over(Window.partitionBy([year('date')])).alias('MaxIndex'),
# expr("case when F.max(dayofyear('date')).over(Window.partitionBy([year('date')]))>365 then 'true' else 'false' end " ).alias("is_leap_year"),
# expr("case when week_name_swedish_short in ('lö','sö') then 'true' else 'false' end " ).alias("is_weekend"),
date_add("date", -1).alias("previous_date"),
add_months("date",-12).alias("last_year_date"),
trunc(add_months("date",-12), "year").alias("first_date_of_last_year"),
concat(year(trunc(add_months("date",-12), "year")),lit("-12-31")).cast(DateType()).alias("last_date_of_last_year"),
add_months("date",-1).alias("previous_month_date"),
trunc(add_months("date",-1), "month").alias("previous_month_date_start"),
last_day(trunc(add_months("date",-1), "month")).alias("previous_month_date_end"),
date_add("date", -7).alias("previous_WEEK")

)#.drop('MaxIndex')#.select([F.col(col).alias(col.lower()) for col in df.columns])





























#EEE MMM
from pyspark.sql.types import *

from pyspark.sql.functions import *
from pyspark.sql import Window,functions as F
beginDate = '2023-01-01'
endDate = '2024-12-31'

#https://www.obstkel.com/spark-sql-date-functions
#https://dwgeek.com/spark-sql-date-and-timestamp-functions-and-examples.html/
#https://towardsdatascience.com/the-most-useful-date-manipulation-functions-in-spark-7d827f790b

df=spark.sql(f"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as date")\
.withColumn("Last_updated_time_in_Azure",from_utc_timestamp(current_timestamp(),'Europe/Stockholm'))\
.withColumn('date_key',date_format('date', 'yyyyMMdd').cast(IntegerType()))\
.withColumn("first_date_of_year", trunc("date", "year"))\
.withColumn("last_date_of_year", concat(year("date"),lit("-12-31")).cast(DateType()))\
.withColumn("first_date_of_quarter", trunc("date", "quarter"))\
.withColumn("last_date_of_quarter", add_months(last_day("first_date_of_quarter"),2))\
.withColumn("first_date_of_month", trunc("date", "month"))\
.withColumn("last_date_of_month", last_day("Date"))\
.withColumn("first_date_of_week", trunc("date", "week"))\
.withColumn("last_date_of_week", date_add("first_date_of_week",6))\
.withColumn('date_of_same_weekday_last_year', date_add("date", -364))\
.withColumn("first_date_of_same_weekday_last_year", trunc("date_of_same_weekday_last_year", "week"))\
.withColumn("last_date_of_same_weekday_last_year", date_add("first_date_of_same_weekday_last_year",6))\
.withColumn('year_code', year('date'))\
.withColumn("quarter_code", concat(date_format('date', 'yyyy'),lpad(quarter("date"),2, '0')).cast(IntegerType()))\
.withColumn('month_code',date_format('date', 'yyyyMM').cast(IntegerType()))\
.withColumn('month_nummer', lpad(month('date'),2,"0"))\
.withColumn('week_code', concat(year("date"), lpad(weekofyear('date'),2,"0")).cast(IntegerType()))\
.withColumn('week_number', lpad(weekofyear('date'),2,"0"))\
.withColumn('week_name', concat(lit("W"),"week_number"))\
.withColumn('week_long_name', concat("year_code","week_name"))\
.withColumn('quater_number', lpad(quarter("date"),2,"0"))\
.withColumn("quater_name", concat(lit("Q"),quarter("date")))\
.withColumn("quater_code", concat(date_format('date', 'yyyy'),"quater_name"))\
.withColumn("month_name_english_long",date_format("date", "MMMM")) \
.withColumn("month_name_english_short",date_format("date", "MMM")) \
.withColumn('month_name_swedish_long', F.to_csv(F.struct('date'), {'dateFormat': 'MMMM', 'locale': 'sv'}))\
.withColumn('month_name_swedish_short', F.to_csv(F.struct('date'), {'dateFormat': 'MMM', 'locale': 'sv'}))\
.withColumn("number_of_days_in_month",dayofmonth("last_date_of_month") )\
.withColumn('day_of_year', dayofyear('date'))\
.withColumn('ct',F.count("*").over(Window.partitionBy('quater_code')))\
.withColumn('days_of_quarter', datediff(date_add("last_date_of_quarter",1),"date"))\
.withColumn('day_of_quarter',col('ct')-col('days_of_quarter')+lit(1))\
.drop('days_of_quarter','ct')\
.withColumn('day_of_month', dayofmonth('date'))\
.withColumn('day_of_week', F.expr('weekday(date) + 1'))\
.withColumn("week_name_english_long",date_format("date", "EEEE")) \
.withColumn("week_name_english_short",date_format("date", "EEE")) \
.withColumn('week_name_swedish_long', F.to_csv(F.struct('date'), {'dateFormat': 'EEEE', 'locale': 'sv'}))\
.withColumn('week_name_swedish_short', F.to_csv(F.struct('date'), {'dateFormat': 'EEE', 'locale': 'sv'}))\
.withColumn('MaxIndex',F.max('day_of_year').over(Window.partitionBy(['year_code'])))\
.withColumn("is_leap_year",expr("case when MaxIndex>365 then 'true' else 'false' end " ) )\
.withColumn("is_weekend",expr("case when week_name_swedish_short in ('lö','sö') then 'true' else 'false' end " ) )\
.drop("MaxIndex")\
.withColumn('previous_date', date_add("date", -1))\
.withColumn("last_year_date", add_months("date",-12))\
.withColumn("first_date_of_last_year", trunc("last_year_date", "year"))\
.withColumn("last_date_of_last_year", concat(year("first_date_of_last_year"),lit("-12-31")).cast(DateType()))\
.withColumn("previous_month_date", add_months("date",-1))\
.withColumn("previous_month_date_start", trunc("previous_month_date", "month"))\
.withColumn("previous_month_date_end", last_day("previous_month_date_start"))\
.withColumn('previous_WEEK', date_add("date", -7))\
#.select([F.col(col).alias(col.lower()) for col in df.columns])



display(df)
   















 






   











































import pandas as pd
from datetime import datetime
from pyspark.sql.types import StructField, StructType, StringType, IntegerType,DateType,TimestampType, LongType,DoubleType
from delta.tables import *
from pyspark.sql.functions import *

# COMMAND ----------

#pathToTable='/mnt/powerbi/gold/marts/parquet/dim_calendar'

# COMMAND ----------



keepcols=['date', 'datekey', 'yearmonthday', 'yearmonth01',
       'year_month_01', 'yearmonth', 'yearcode', 'isleapyear',
       'firstdateofyear', 'lastdateofyear', 'quartercode', 'quaternumber',
       'quatername', 'quaterlongname', 'firstmonthofquarter',
       'lastmonthofquarter', 'firstdateofquarter', 'lastdateofquarter',
       'monthcode', 'monthofyearnumber', 'monthnameenglishlong',
       'monthnameenglishshort','monthnameswedishlong','monthnameswedishshort', 'firstdateofmonth', 'lastdateofmonth',
       'numberofdaysinmonth', 'weekcode', 'weekofyearnumber', 'weekname',
       'weeklongname', 'firstdateofweek', 'lastdateofweek',
       'dateofsameweekdaylastyear', 'firstdateofweeksameweekdaylastyear',
       'lastdateofweeksameweekdaylastyear', 'dayofyear', 'dayofquarter',
       'dayofmonth', 'dayofweek', 'dayofweeknameenglishlong',
       'dayofweeknameenglishshort','dayofweeknameswedishlong','dayofweeknameswedishshort', 'previousdateyear', 'previousdatemonth',
       'previousdatemonthstart', 'previousdatemonthend', 'previousdateweek',
       'previousdateday', 'nextdateday', 'isweekend', 'hold']

# COMMAND ----------


# COMMAND ----------


dates=pd.date_range('20180101', '20251231',freq='D')


df=pd.DataFrame({'Date':dates})
#df['Today']=time.strftime("%Y-%m-%d")
df['Today']=datetime.today()
df['Today'] =(df.Today + pd.DateOffset(hours=1)).dt.strftime('%Y-%m-%d')
df['Today']=df.Today.astype("datetime64[s]")
df["DateKey"] = df.Date.dt.strftime('%Y%m%d')
df["YearMonthDay"] = df.Date.dt.strftime('%Y%m%d')
df["YearMonth01"] = df.Date.dt.strftime('%Y%m01')
df["Year_Month_01"] = df.Date.dt.strftime('%Y-%m-01')
df["YearMonth"] = df.Date.dt.strftime('%Y%m')
df["DayDate"] = df.Date
df['YearCode']= df.Date.dt.strftime('%Y')
df["IsLeapYear"] = df.Date.dt.is_leap_year
df['FirstDateOfYear']= df.Date.dt.to_period("Y").dt.start_time
df['LastDateOfYear']= df.Date.dt.to_period("Y").dt.end_time
df['QuarterCode']= df.Date.dt.strftime('%Y').astype(str)+df.Date.dt.quarter.astype(str).str.pad(width=2,fillchar='0')
df['QuaterNumber']= df.Date.dt.quarter
df['QuaterName']= 'Q'+df.Date.dt.quarter.astype(str)
df['QuaterLongName']= df.Date.dt.strftime('%Y').astype(str)+'Q'+df.Date.dt.quarter.astype(str)
df['FirstMonthOfQuarter'] = (df.Date.dt.to_period("Q").dt.start_time).dt.strftime('%m')
df['LastMonthOfQuarter'] = (df.Date.dt.to_period("Q").dt.end_time).dt.strftime('%m')
df['FirstDateOfQuarter'] = df.Date.dt.to_period("Q").dt.start_time
df['LastDateOfQuarter'] = df.Date.dt.to_period("Q").dt.end_time
df["MonthCode"] = df.Date.dt.strftime('%Y%m')
df["MonthOfYearNumber"] = df.Date.dt.strftime('%m')
df['MonthNameEnglishLong']= df.Date.dt.strftime('%B')
df['MonthNameEnglishShort']= df.Date.dt.strftime('%b')

df.loc[df['MonthNameEnglishLong'].isin(['January']), 'MonthNameSwedishLong'] = 'januari'
df.loc[df['MonthNameEnglishLong'].isin(['February']), 'MonthNameSwedishLong'] = 'februari'
df.loc[df['MonthNameEnglishLong'].isin(['March']), 'MonthNameSwedishLong'] = 'mars'
df.loc[df['MonthNameEnglishLong'].isin(['April']), 'MonthNameSwedishLong'] = 'april'
df.loc[df['MonthNameEnglishLong'].isin(['May']), 'MonthNameSwedishLong'] = 'maj'
df.loc[df['MonthNameEnglishLong'].isin(['June']), 'MonthNameSwedishLong'] = 'juni'
df.loc[df['MonthNameEnglishLong'].isin(['july']), 'MonthNameSwedishLong'] = 'juli'
df.loc[df['MonthNameEnglishLong'].isin(['August']), 'MonthNameSwedishLong'] = 'augusti'
df.loc[df['MonthNameEnglishLong'].isin(['September']), 'MonthNameSwedishLong'] = 'september'
df.loc[df['MonthNameEnglishLong'].isin(['October']), 'MonthNameSwedishLong'] = 'oktober'
df.loc[df['MonthNameEnglishLong'].isin(['November']), 'MonthNameSwedishLong'] = 'november'
df.loc[df['MonthNameEnglishLong'].isin(['December']), 'MonthNameSwedishLong'] = 'december'


df['MonthNameSwedishShort']= df.MonthNameSwedishLong.str[0:3]


df['FirstDateOfMonth']= df.Date.dt.to_period("m").dt.start_time
df['LastDateOfMonth']= df.Date.dt.to_period("m").dt.end_time
df['NumberOfDaysInMonth']= df.Date.dt.daysinmonth
df['WeekCode']= df.Date.dt.strftime('%Y').astype(str)+df.Date.dt.isocalendar().week.astype(str).str.pad(width=2,fillchar='0') 
df['WeekOfYearNumber']= df.Date.dt.isocalendar().week
df['WeekName']= 'W'+df.Date.dt.isocalendar().week.astype(str).str.pad(width=2,fillchar='0')
df['WeekLongName']= df.Date.dt.strftime('%Y').astype(str)+'W'+df.Date.dt.isocalendar().week.astype(str).str.pad(width=2,fillchar='0') 
df['FirstDateOfWeek']= df.Date.dt.to_period("W").dt.start_time
df['LastDateOfWeek']= df.Date.dt.to_period("W").dt.end_time
df['DateOfSameWeekDayLastYear'] = df.Today - pd.DateOffset(days=364)
df['FirstDateOfWeekSameWeekDayLastYear'] = \
    df.DateOfSameWeekDayLastYear.dt.to_period("W").dt.start_time   
df['LastDateOfWeekSameWeekDayLastYear'] = \
    df.DateOfSameWeekDayLastYear.dt.to_period("W").dt.end_time
df["DayOfYear"] = df.Date.dt.dayofyear
df['DayOfQuarter'] = df.groupby(['QuarterCode']).cumcount()+1
df["DayOfMonth"] = df.Date.dt.day
df["DayOfWeek"] = df.Date.dt.dayofweek+1
df['DayOfWeekNameEnglishLong']= df.Date.dt.strftime('%A') #df.Date.dt.weekday_name
df['DayOfWeekNameEnglishShort']= df.Date.dt.strftime('%a')



df.loc[df['DayOfWeekNameEnglishLong'].isin(['Monday']), 'DayOfWeekNameSwedishLong'] = 'måndag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Tuesday']), 'DayOfWeekNameSwedishLong'] = 'tisdag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Wednesday']), 'DayOfWeekNameSwedishLong'] = 'onsdag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Thursday']), 'DayOfWeekNameSwedishLong'] = 'torsdag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Friday']), 'DayOfWeekNameSwedishLong'] = 'fredag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Saturday']), 'DayOfWeekNameSwedishLong'] = 'lördag'
df.loc[df['DayOfWeekNameEnglishLong'].isin(['Sunday']), 'DayOfWeekNameSwedishLong'] = 'söndag'

df['DayOfWeekNameSwedishShort']= df.DayOfWeekNameSwedishLong.str[0:3]


df['PreviousDateYear'] = df.Date - pd.DateOffset(years=1)
df['PreviousDateMonth'] = df.Date - pd.DateOffset(months=1)
df['PreviousDateMonthStart'] = (df.Date - pd.DateOffset(months=1)).dt.to_period("m").dt.start_time
df['PreviousDateMonthEnd'] = (df.Date - pd.DateOffset(months=1)).dt.to_period("m").dt.end_time
df['PreviousDateWeek'] = df.Date - pd.DateOffset(weeks=1)
df['PreviousDateDay'] = df.Date - pd.DateOffset(days=1)
df['NextDateDay'] = df.Date + pd.DateOffset(days=1)
# df['Datum_swe']= df.MonthNameSwedishShort+'-'+df.Date.dt.strftime('%Y')
df['IsWeekend']='False'
df.loc[df['DayOfWeek'].isin([6,7]), 'IsWeekend'] = 'True'
df['Hold']=1
# df.drop(['Today','Man'], axis=1,inplace=True)    
df=df.applymap(lambda x: x.strip() if type(x) is str else x) #strip all nonNumeric columns
df=df.rename(columns={cols: cols.replace(' ','') for cols in df.columns}) # Remove spaces from columns
df.columns = df.columns.str.lower()
df=df[keepcols]

# COMMAND ----------

cast_as_IntegerType=['datekey','quartercode','yearmonthday','yearmonth01','yearmonth','yearcode','quaternumber','monthcode',
                'numberofdaysinmonth','weekcode','weekofyearnumber','dayofyear','dayofquarter','dayofmonth','dayofweek',
                'hold']

cast_as_DateType=['date','year_month_01','firstdateofyear','lastdateofyear','firstdateofquarter','lastdateofquarter',
                 'firstdateofmonth','lastdateofmonth','firstdateofweek','lastdateofweek','dateofsameweekdaylastyear',
                 'firstdateofweeksameweekdaylastyear','lastdateofweeksameweekdaylastyear','previousdateyear','previousdatemonth',
                 'previousdatemonthstart','previousdatemonthend','previousdateweek','previousdateday','nextdateday']

df_spark = spark.createDataFrame(df)

for col_name in df_spark.columns: df = df_spark.withColumn(col_name, df_spark[col_name].cast(StringType()))
for col_name in cast_as_IntegerType: df = df.withColumn(col_name, df[col_name].cast(IntegerType()))
for col_name in cast_as_DateType: df = df.withColumn(col_name, df[col_name].cast(DateType()))
for col_name in df.columns: df = df.withColumnRenamed(col_name, col_name.lower())
df=df.select(*keepcols)


display(df)


#table_name='dim_calendar'
#pathToTable='/mnt/powerbi/gold/delta/'+table_name
#dbutils.fs.rm(pathToTable, recurse=True)

df.write \
  .format("delta") \
  .mode("overwrite") \
  .option("overwriteSchema","true") \
  .partitionBy("yearcode") \
  .save(pathToTable)






from pyspark.sql.functions import *

df=spark.createDataFrame([["1"]],["id"])
df=df.withColumn("updated",from_utc_timestamp(current_timestamp(),'Europe/Stockholm'))
df=df.drop(col("id"))


df.write \
  .format("delta") \
  .option("overwriteSchema","True") \
  .mode("overwrite") \
  .save('/mnt/powerbi/gold/delta/marts/updated')
  
  
  table_names=['dim_calendar']
database='microdeb_db'
the_delta_path = '/mnt/powerbi/gold/marts/parquet/'

for table_name in table_names:

    spark.sql("DROP TABLE if exists " + database+'.'+table_name)
    delta_path=the_delta_path+table_name
    spark.sql("CREATE TABLE  " + database+'.'+table_name + " USING DELTA LOCATION '" + delta_path + "'")
    #display(spark.sql('DESCRIBE DETAIL pbm_db.calendar'))
